// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
}

model VerificationToken {
  id        String @id @default(cuid())
  email     String
  token     String @unique
  expires   DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id    String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}


model Cloth {
  id           String  @id @default(cuid())
  companyCloth String  @unique
  sheet        Sheet[]
}


model Sheet {
  id              String   @id @default(cuid())
  cuttingDate     DateTime
  color           String    @unique
  thanNo          Int
  weightPerLenght Float
  palla           Int
  totalSize       Int
  average         Float
  Size            Size[]
  Worker          Worker[]
  Bundle          Bundle[]
  cloth           Cloth    @relation(fields: [clothId], references: [id], onDelete: Cascade)
  clothId         String
}
model Size {
  id        String   @id @default(cuid())
  type      String   
  quantity  Int
  sheet     Sheet    @relation(fields: [sheetId], references: [id])
  sheetId   String
  Bundle    Bundle[]
}
model Bundle {
  id           String @id @default(cuid())
  bundleId     String
  size         Size   @relation(fields: [sizeId], references: [id])
  sizeId       String
  bundleSize   Int
  sheet        Sheet     @relation(fields: [sheetId], references: [id])
  sheetId      String
  assignedTo   Worker?   @relation(fields: [assignedToId], references: [id])
  assignedToId String?
  assignedDate DateTime
  receivedDate DateTime
  payments     Payment[]
}
model Worker {
  id      String   @id @default(cuid())
  name    String
  bundle  Bundle[]
  sheet   Sheet    @relation(fields: [sheetId], references: [id])
  sheetId String
}
model Payment {
  id        String   @id @default(cuid())
  advance   Float
  quantity  Int
  rate      Float
  total     Float
  remarks   String
  bundle    Bundle?  @relation(fields: [bundleId], references: [id])
  bundleId  String?
  createdAt DateTime @default(now())
}

