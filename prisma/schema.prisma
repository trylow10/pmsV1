// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  brand             Brand[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId])
}

model Worker {
  id           String    @id @default(cuid())
  name         String
  assignedJobs Bundle[]
  inventory    Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId  String
}
model Bundle {
  id           String    @id @default(cuid())
  bundleId     String
  sizeType     String
  bundleSize   Int
  inventory    Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId  String
  assignedTo   Worker?   @relation(fields: [assignedToId], references: [id])
  assignedToId String?
  assignedDate DateTime
  receivedDate DateTime
  payments     Payment[]
}

model Inventory {
  id              String   @id @default(cuid())
  name            String
  cuttingDate     DateTime
  color           String
  thanNo          Int
  weightPerLenght Float
  palla           Int
  totalSize       Int
  Ssize           Int
  Msize           Int
  Lsize           Int
  XLsize          Int
  XXLsize         Int
  XXXLsize        Int
  freeSize        Int
  Worker          Worker[]
  Bundle          Bundle[]
  brand           Brand   @relation(fields: [brandId], references: [id])
  brandId         String 
}

model Payment {
  id        String   @id @default(cuid())
  advance   Float
  quantity  Int
  rate      Float
  total     Float
  remarks   String
  bundle    Bundle?   @relation(fields: [bundleId], references: [id])
  bundleId  String?
  createdAt DateTime @default(now())
}
model Brand {
  id           String @id @default(cuid())
  name         String
  inventory    Inventory[]
  User         User    @relation(fields: [userId], references: [id])
  userId       String
}