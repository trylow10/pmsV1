// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  inventoryBooks Inventory[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId])
}


enum FabricSize {
  S
  M
  L
  XL
  XXL
  XXXL
}

model Size {
  id          String    @id @default(cuid())
  name        FabricSize
  bundle      Bundle[]
  inventory   Inventory[]
}

model Worker {
  id            String    @id @default(cuid())
  name          String
  assignedJobs  Bundle[]
  inventories   Inventory[] 
}

model Bundle {
  id          String     @id @default(cuid())
  size        Size       @relation(fields: [sizeId], references: [id])
  sizeId      String
  assignedTo  Worker?    @relation(fields: [assignedToId], references: [id])
  assignedToId String?
  payments    Payment[]
}

model Inventory {
  id              String     @id @default(cuid())
  name            String
  cuttingDate     DateTime
  color           String
  thanNo          Int
  weight          Int
  length          Int
  palla           Int
  quantity        Int
  total           Float
  size            Size       @relation(fields: [sizeId], references: [id])
  sizeId          String
  user            User       @relation(fields: [userId], references: [id])
  userId          String
  worker          Worker    @relation(fields: [workerId], references: [id])
  workerId        String
  company         Company   @relation(fields: [companyId], references: [id])
  companyId       String
}
model Payment {
  id                String     @id @default(cuid())
  advance           Float
  amount            Float
  remarks           String?
  bundle            Bundle     @relation(fields: [bundleId], references: [id])
  bundleId          String
  createdAt         DateTime   @default(now())
}

model Company {
  id          String      @id @default(cuid())
  name        String
  inventories Inventory[]
  inventoryId String
}